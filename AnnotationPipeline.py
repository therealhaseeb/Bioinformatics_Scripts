import os
import hail as hl
hl.init(sc, idempotent=True)

mt = hl.read_matrix_table("/PGR/promis_all.mt").cache()
mt.describe()

# specifies the VEP command and the config file

dbutils.fs.rm("/vep/vep.config", True)
dbutils.fs.put("/vep/vep.config", """{
    "command": [
        "/opt/vep/src/ensembl-vep/vep",
        "--format", "vcf",
        "__OUTPUT_FORMAT_FLAG__",
        "--everything",
        "--allele_number",
        "--no_stats",
        "--cache",
        "--offline",
        "--dir_cache", "/mnt/dbnucleus/dbgenomics/grch37_vep_96",
        "--minimal",
        "--assembly", "GRCh37",
        "--use_given_ref",
        "-o", "STDOUT"
    ],
    "env": {},
    "vep_json_schema": "Struct{assembly_name:String,allele_string:String,ancestral:String,colocated_variants:Array[Struct{aa_allele:String,aa_maf:Float64,afr_allele:String,afr_maf:Float64,allele_string:String,amr_allele:String,amr_maf:Float64,clin_sig:Array[String],end:Int32,eas_allele:String,eas_maf:Float64,ea_allele:String,ea_maf:Float64,eur_allele:String,eur_maf:Float64,exac_adj_allele:String,exac_adj_maf:Float64,exac_allele:String,exac_afr_allele:String,exac_afr_maf:Float64,exac_amr_allele:String,exac_amr_maf:Float64,exac_eas_allele:String,exac_eas_maf:Float64,exac_fin_allele:String,exac_fin_maf:Float64,exac_maf:Float64,exac_nfe_allele:String,exac_nfe_maf:Float64,exac_oth_allele:String,exac_oth_maf:Float64,exac_sas_allele:String,exac_sas_maf:Float64,id:String,minor_allele:String,minor_allele_freq:Float64,phenotype_or_disease:Int32,pubmed:Array[Int32],sas_allele:String,sas_maf:Float64,somatic:Int32,start:Int32,strand:Int32}],context:String,end:Int32,id:String,input:String,intergenic_consequences:Array[Struct{allele_num:Int32,consequence_terms:Array[String],impact:String,minimised:Int32,variant_allele:String}],most_severe_consequence:String,motif_feature_consequences:Array[Struct{allele_num:Int32,consequence_terms:Array[String],high_inf_pos:String,impact:String,minimised:Int32,motif_feature_id:String,motif_name:String,motif_pos:Int32,motif_score_change:Float64,strand:Int32,variant_allele:String}],regulatory_feature_consequences:Array[Struct{allele_num:Int32,biotype:String,consequence_terms:Array[String],impact:String,minimised:Int32,regulatory_feature_id:String,variant_allele:String}],seq_region_name:String,start:Int32,strand:Int32,transcript_consequences:Array[Struct{allele_num:Int32,amino_acids:String,biotype:String,canonical:Int32,ccds:String,cdna_start:Int32,cdna_end:Int32,cds_end:Int32,cds_start:Int32,codons:String,consequence_terms:Array[String],distance:Int32,domains:Array[Struct{db:String,name:String}],exon:String,gene_id:String,gene_pheno:Int32,gene_symbol:String,gene_symbol_source:String,hgnc_id:String,hgvsc:String,hgvsp:String,hgvs_offset:Int32,impact:String,intron:String,lof:String,lof_flags:String,lof_filter:String,lof_info:String,minimised:Int32,polyphen_prediction:String,polyphen_score:Float64,protein_end:Int32,protein_start:Int32,protein_id:String,sift_prediction:String,sift_score:Float64,strand:Int32,swissprot:String,transcript_id:String,trembl:String,uniparc:String,variant_allele:String}],variant_class:String}"
}""")


mt = hl.read_matrix_table("/PGR/promis_all_vep.mt").cache()
mt.describe()





# filter for high confiedence variants that have at least one hom-alt call
lof = hl.read_matrix_table("/PGR/promis_lof.mt")
lofHCHom = lofHCmt.filter_rows((lofHCmt.info.nhomvar > 0) & (lofHCmt.info.lofteelof == "HC")).cache()
lofHCHom.rows().count()

# Count the per gene hom-alt LoF cases 
#t = lofHCHom.group_rows_by(lofHCHom.info.gene)
#t = t.aggregate(homCount = hl.agg.sum(lofHCHom.info.nhomvar))
#mt_grouped = lofHCHom.group_rows_by(lofHCHom.info.gene).aggregate_rows(consequences = hl.agg.collect_as_set(lofHCHom.info.nhomvar)).result()
#aggregate(lof_hom = hl.agg.sum(mt.info.nhomvar)))
#dataset_result =  lofHCHom.group_rows_by(lofHCHom.info.gene).aggregate(n_gom = hl.agg.count(lofHCHom.info.nhomvar>0))
#dataset_result = dataset_result.cache() #
#dataset_result.rows().show()
import hail.expr.aggregators as agg

entries = lofHCmt.entries()
results = (entries.group_by(gene = entries.info.gene.upper())
      .aggregate(n_ref = agg.count_where(entries.GT.is_hom_ref()), 
                 n_het = agg.count_where(entries.GT.is_het()),
                 n_hom = agg.count_where(entries.GT.is_hom_var()),
                )
          )

results = results.cache()

res_hom = results.filter((results.n_hom>0))
res_ann = res_hom.annotate(MAF_KO = res_hom.n_hom/(res_hom.n_hom+res_hom.n_het+res_hom.n_ref),
                           MAF_LoF = (2*res_hom.n_hom+res_hom.n_het)/(2*(res_hom.n_hom+res_hom.n_het+res_hom.n_ref)),
                           )
res_ann.show()

pheno = "/FileStore/tables/Novo_data_share3.csv"
pheTable = hl.import_table(pheno, key='wes_id',delimiter=';', missing='NA',impute=True).cache()

# Specify cases and controls based on 
pheTable = pheTable.annotate(case = hl.cond(pheTable.status=="MI",1,0))

# Add phenotype sub-structure
mt_qc = mt_qc.annotate_cols(pheno = pheTable[mt_qc.s])
rareMiss1per = rareMiss1per.annotate_cols(pheno = pheTable[rareMiss1per.s]).cache()

# Filter a all high-confidence LoF alleles
lof = hl.read_matrix_table("/PGR/promis_lof.mt")
lof = hl.variant_qc(lof)
lofHCHom = lof.filter_rows((lof.info.nhomvar > 0) & (lof.info.lofteelof == "HC") & (lof.variant_qc.AF[1] <= 0.05)).cache()
lofHCHom.rows().count()

import hail.expr.aggregators as agg

entries = lofHCHom.entries()
results = (entries.group_by(gene = entries.info.gene.upper())
      .aggregate(n_ref = agg.count_where(entries.GT.is_hom_ref()), 
                 n_het = agg.count_where(entries.GT.is_het()),
                 n_hom = agg.count_where(entries.GT.is_hom_var()),
                 samples = agg.collect_as_set(entries.s.lower())
                )
          )

results = results.cache()


#write table
dataPath2 = "abfss://promis@saazrnnghssciencedata04.dfs.core.windows.net/"
results.export(dataPath2 + 'promis_KO.txt')