# Filter a all high-confidence LoF alleles
lof = hl.read_matrix_table("/PGR/promis_lof.mt")
lof = hl.variant_qc(lof)

lofHCHom = lof.filter_rows((lof.info.nhomvar > 0) & (lof.info.lofteelof == "HC") & (lof.variant_qc.AF[1] <= 0.05)).cache()
lofHCHom.rows().count()


lofHCHet = lof.filter_rows((lof.info.nhet > 0) & (lof.info.lofteelof == "HC") & (lof.variant_qc.AF[1] <= 0.05)).cache()
lofHCHet.rows().count()

phenoFile = "/FileStore/tables/Novo_data_share3.csv"
pheTable = hl.import_table(phenoFile, key='wes_id',delimiter=';', missing='NA',impute=True).cache()

# Specify cases and controls based on 
pheTable = pheTable.annotate(case = hl.cond(pheTable.status=="MI",1,0))
pheTable = pheTable.annotate(bmi = pheTable.weight/(pheTable.height/100)**2)
#pheTable = pheTable.annotate(creaAmbuRation = pheTable.creatinine/pheTable.am)

# Add phenotype sub-structure
lofHCHom = annotateMT(lofHCHom.annotate_cols(pheno = pheTable[lofHCHom.s]))
lofHCHet = annotateMT(lofHCHet.annotate_cols(pheno = pheTable[lofHCHet.s]))

# Calculated eGFR using method in Clin Biochem Rev. 2011 May; 32(2): 75–79
# creatinine to be given in mg/dl, default output given plasma creatinine only is for 40-yo white male
def eGFRcalc(pCreatinine, age=40, isFemale=0, isBlack=0):
  res = 186*(pCreatinine)**(-1.154)
  res *= age**(-0.203)
  if isFemale: res *= 0.743
  if isBlack: res *= 1.121
  return res

# Add eGFR, ethnicity infomation can be added from genetics later on

def annotateMT(mt):
  mt = mt.annotate_cols(eGFR = hl.cond(mt.pheno.gender=="Female",
                                                   eGFRcalc(mt.pheno.creatinine,mt.pheno.age,isFemale=1),
                                                   eGFRcalc(mt.pheno.creatinine,mt.pheno.age)
                                                  ),
                                    Framingham = hl.cond(mt.pheno.gender=="Female",
                                                   frs(isFemale=1, age=mt.pheno.age, bmi=mt.pheno.bmi, 
                                                       sbp=mt.pheno.bpsystolicfirst, ht_treat=0,dia=mt.pheno.dm_h,
                                                       smk=mt.pheno.yearsmoked
                                                      ),
                                                    frs(isFemale=0, age=mt.pheno.age, bmi=mt.pheno.bmi, 
                                                       sbp=mt.pheno.bpsystolicfirst, ht_treat=0,dia=mt.pheno.dm_h,
                                                       smk=mt.pheno.yearsmoked
                                                      )
                                                  )
                                   )
  return mt




t = lofHCHom.select_cols(lofHCHom.pheno.age, lofHCHom.pheno.creatinine,lofHCHom.pheno.dm_h,lofHCHom.eGFR,lofHCHom.Framingham)
t.cols().show()

dp_hist = lofHCHom.aggregate_cols(hl.expr.aggregators.hist(lofHCHom.Framingham, 0, 1, 100))
p = hl.plot.histogram(dp_hist, legend='10-y Framingham risk score', title='Framingham')
html = file_html(p, CDN, "my hist")
displayHTML(html)


entries = lofHCHom.entries()
results = (entries.group_by(gene = entries.info.gene.upper())
      .aggregate(       
                 # sample level count     
                 ref_samples = hl.len(hl.agg.filter(entries.GT.is_hom_ref(), agg.collect_as_set(entries.s.lower()))),
                 het_samples = hl.len(hl.agg.filter(entries.GT.is_het(), agg.collect_as_set(entries.s.lower()))),
                 hom_samples = hl.len(hl.agg.filter(entries.GT.is_hom_var(), agg.collect_as_set(entries.s.lower()))),
                 
                 # Split count KO alleles by type and by loci
                 LoFTypeCount = hl.agg.filter(entries.GT.is_hom_var(), agg.counter(entries.info.most_severe_consq)),
                 LoFLociCount = hl.agg.filter(entries.GT.is_hom_var(), agg.counter(entries.locus)),
                 
                 KO_samples = hl.agg.filter(entries.GT.is_hom_var(), agg.collect_as_set(entries.s.lower())),
                 
                 # split cases and controls 
                 KO_MI_cases = hl.agg.filter(entries.GT.is_hom_var(), agg.counter(entries.pheno.status)),
                 LoF_MI_cases = hl.agg.filter(entries.GT.is_non_ref(), agg.counter(entries.pheno.status)),
                 
                 # other interesting mean phenotypes
                 KO_LDLc_mean = hl.agg.filter(entries.GT.is_hom_var(), agg.mean(entries.pheno.ldlc)),
                 KO_creatinine_mean = hl.agg.filter(entries.GT.is_hom_var(), agg.mean(entries.pheno.creatinine)),
                 KO_eGFR_mean = hl.agg.filter(entries.GT.is_hom_var(), agg.mean(entries.eGFR)),
                 KO_TG_mean = hl.agg.filter(entries.GT.is_hom_var(), agg.mean(entries.pheno.tgmgdl)),
                 Lof_TG_mean = hl.agg.filter(entries.GT.is_het(), agg.mean(entries.pheno.tgmgdl)),
                 KO_Framingham_mean = hl.agg.filter(entries.GT.is_hom_var(), agg.mean(entries.Framingham)),
                 LoF_Framingham_mean = hl.agg.filter(entries.GT.is_het(), agg.mean(entries.Framingham)),
                 KO_diabetes_frac =  hl.agg.filter(entries.GT.is_hom_var(), agg.mean(entries.pheno.dm_h)),
        
                 # count total seperate genotypes  
                 GT_counter = agg.counter(entries.GT),
                 HWEpValueMean = agg.mean(entries.info.pHWEn) 
                )
          )

# calculate the gene level alleles frequencies
results = results.annotate(MAF_KO = results.hom_samples/(results.het_samples+results.ref_samples),
                           MAF_LoF = (results.het_samples+results.hom_samples)/(results.ref_samples))
results = results.cache()
results.show()
